{{ 'option_selection.js' | shopify_asset_url | script_tag }}

<style>
    *,:after,:before{box-sizing:border-box;border:0 solid #e5e7eb}:after,:before{--tw-content:""}html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;-o-tab-size:4;tab-size:4;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-feature-settings:normal}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:initial}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;font-weight:inherit;line-height:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button;background-color:initial;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:initial}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0}fieldset,legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}textarea{resize:vertical}input::-moz-placeholder,textarea::-moz-placeholder{opacity:1;color:#9ca3af}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]{display:none}*,::backdrop,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:#3b82f680;--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.fixed{position:fixed}.inset-0{top:0;right:0;bottom:0;left:0}.z-50{z-index:50}.my-20{margin-top:5rem;margin-bottom:5rem}.mt-4{margin-top:1rem}.inline-block{display:inline-block}.flex{display:flex}.grid{display:grid}.h-8{height:2rem}.min-h-screen{min-height:100vh}.w-full{width:100%}.w-8{width:2rem}.max-w-xs{max-width:20rem}.max-w-xl{max-width:36rem}.translate-y-4{--tw-translate-y:1rem}.translate-y-0,.translate-y-4{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.translate-y-0{--tw-translate-y:0px}.transform{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.cursor-pointer{cursor:pointer}.items-end{align-items:flex-end}.items-center{align-items:center}.justify-center{justify-content:center}.justify-between{justify-content:space-between}.gap-8{gap:2rem}.space-x-4>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-right:calc(1rem*var(--tw-space-x-reverse));margin-left:calc(1rem*(1 - var(--tw-space-x-reverse)))}.overflow-hidden{overflow:hidden}.overflow-y-auto{overflow-y:auto}.rounded-lg{border-radius:.5rem}.bg-gray-500{--tw-bg-opacity:1;background-color:rgb(107 114 128/var(--tw-bg-opacity))}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity))}.bg-opacity-40{--tw-bg-opacity:0.4}.p-8{padding:2rem}.px-4{padding-left:1rem;padding-right:1rem}.text-left{text-align:left}.text-center{text-align:center}.text-lg{font-size:1.125rem;line-height:1.75rem}.font-bold{font-weight:700}.font-medium{font-weight:500}.uppercase{text-transform:uppercase}.text-gray-600{--tw-text-opacity:1;color:rgb(75 85 99/var(--tw-text-opacity))}.opacity-0{opacity:0}.opacity-100{opacity:1}.shadow-xl{--tw-shadow:0 20px 25px -5px #0000001a,0 8px 10px -6px #0000001a;--tw-shadow-colored:0 20px 25px -5px var(--tw-shadow-color),0 8px 10px -6px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.transition{transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,-webkit-backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-backdrop-filter;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.transition-opacity{transition-property:opacity;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.transition-all{transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.duration-300{transition-duration:.3s}.duration-200{transition-duration:.2s}.ease-out{transition-timing-function:cubic-bezier(0,0,.2,1)}.ease-in{transition-timing-function:cubic-bezier(.4,0,1,1)}html{font-family:Nunito,ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji}p{margin-bottom:1rem}.hover\:text-gray-700:hover{--tw-text-opacity:1;color:rgb(55 65 81/var(--tw-text-opacity))}.focus\:outline-none:focus{outline:2px solid #0000;outline-offset:2px}@media (min-width:640px){.sm\:block{display:block}.sm\:translate-y-0{--tw-translate-y:0px}.sm\:scale-95,.sm\:translate-y-0{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.sm\:scale-95{--tw-scale-x:.95;--tw-scale-y:.95}.sm\:scale-100{--tw-scale-x:1;--tw-scale-y:1;transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.sm\:p-0{padding:0}}@media (min-width:768px){.md\:grid-cols-4{grid-template-columns:repeat(4,minmax(0,1fr))}.md\:items-center{align-items:center}}@media (min-width:1536px){.\32xl\:max-w-2xl{max-width:42rem}}
</style>

{%- liquid
    assign current_variant = section.settings.signature_product.selected_or_first_available_variant | default: section.settings.signature_product.variants.first
    assign current_selling_plan_allocation = current_variant.selected_selling_plan_allocation

    if current_selling_plan_allocation == nil and current_variant.requires_selling_plan
        assign current_selling_plan_allocation = current_variant.selling_plan_allocations | first
    endif

    assign offer = current_selling_plan_allocation | default: current_variant
-%}

<section
        x-data="{
        qty: 1,
        scheduleType: 'signature',

        addToCart(){
          let formData = new FormData(document.querySelector('.shopify-product-form'));
          let standardId = parseInt(Math.floor(Math.random() * 10000) + '' + Date.now());
          formData.append('properties[standardId]', standardId);

          fetch('/cart/add.js', {
              method: 'POST',
              body: formData
            })
            .then(response => {
              return response.json();
            })
            .then(response => {
              this.$dispatch('cart-updated');
              this.$dispatch('toggle-cart');
            })
            .catch((error) => {
              console.error('Error:', error);
            });

        }
      }"
        class="">
    <div class="flex z-10 w-full lg:border-green lg:h-[95px] items-center lg:py-0 py-[20px] px-[20px] lg:px-[30px]">
        <span
                x-text="scheduleType + ' cleanse'"
                x-intersect="$el.classList.add('!opacity-100')"
                class="text-[28px] leading-[28px] lg:text-[40px] lg:leading-[40px] transition-opacity duration-700 ease-in opacity-0 uppercase"
        >

        </span>
    </div>
    <div class="grid border-b lg:divide-x lg:border-t lg:grid-cols-2 lg:border-green lg:divide-green">

        <div class="flex flex-col px-[20px] lg:px-[76px] lg:py-[72px] cleanse-form-wrapper">
            {% form 'product', section.settings.signature_product %}
                <input type="hidden" name="id" value="{{ current_variant.id }}">
                {% comment %} <input type="hidden" name="selling_plan" value="{{ current_selling_plan_allocation.selling_plan.id | default: '' }}"> {% endcomment %}

                <p>{{ section.settings.blurb }}</p>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-1 2xl:grid-cols-2 gap-[10px] md:gap-[20px]">
                    <span class="text-[18px] leading-[18px] font-normal uppercase col-span-1 md:col-span-2 lg:col-span-1 2xl:col-span-2 mt-[40px]">Choose your cleanse</span>

                    {%- unless section.settings.signature_product.has_only_default_variant -%}
                        {%- for variant in section.settings.signature_product.variants -%}
                            {%- assign variant_label_state = true -%}

                            {%- if section.settings.signature_product.options.size == 1 -%}
                                {%- unless section.settings.signature_product.variants[forloop.index0].available -%}
                                    {%- assign variant_label_state = false -%}
                                {%- endunless -%}
                            {%- endif -%}

                            <div class="flex items-center border-[2px] border-green">
                                <input class="hidden" type="radio"
                                        {% if variant.id == current_variant.id %} checked="checked"{% endif %}
                                       value="{{ variant.id | escape }}"
                                       data-index="option{{ forloop.index }}"
                                       name="variant"
                                       id="option-{{ variant.id }}"
                                >
                                <label {% if variant.title contains 'GREEN' %}@click="scheduleType = 'green'"
                                       {% else %}@click="scheduleType = 'signature'"{% endif %}
                                       for="option-{{ variant.id }}"
                                       class="flex px-[10px] py-[10px] items-center gap-x-[15px] text-base w-full cursor-pointer">
                                <span class="w-[20px] h-[20px] border border-green rounded-full relative">
                                    <div class="w-[12px] h-[12px] bg-green rounded-full absolute left-[calc(50%-6px)] top-[calc(50%-6px)] hidden"></div>
                                </span>
                                    {{ variant.title }}

                                    {% if variant.title contains '2' %}
                                        <span class="ml-auto text-right">14 Bottles</span>
                                    {% else %}
                                        <span class="ml-auto text-right">21 Bottles</span>
                                    {% endif %}
                                </label>
                            </div>
                        {%- endfor -%}
                    {%- endunless -%}
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-1 2xl:grid-cols-2 md:gap-[20px] mt-[40px] mb-[20px]">
                    <span class="text-[18px] leading-[18px] font-normal uppercase col-span-1 md:col-span-2 lg:col-span-1 2xl:col-span-2">Purchase Options</span>
                </div>

                <button
                        type="submit"
                        name="add"
                        class="add-to-cart-button  button__primary w-full text-white text center bg-green uppercase py-[19px]"
                >
                <span>
                    Add to cart
                </span>
                </button>
            {% endform %}
        </div>

        <div x-data="bottles" class="grid grid-cols-2 md:grid-cols-3 gap-[1px] mt-[25px] md:mt-[30px] lg:mt-0">
            {%- for block in section.blocks -%}
                {%- case block.type -%}
                    {%- when 'schedule' -%}
                        <div @click="showBottle('{{ block.settings.product_name }}')" x-show="scheduleType == 'signature'"
                             class="flex flex-col py-[20px] transition-colors bg-cream hover:bg-green hover:text-cream group cursor-pointer">
                            <span class="px-[20px]">{{ block.settings.time }}</span>
                            {% if block.settings.image %}


                                <div class="aspect-square">

                                    {%- capture sizes -%}(min-width: {{ settings.page_width }}px) {% if section.blocks.size == 1 %}calc({{ settings.page_width }}px - 100px){% else %}{{ settings.page_width | minus: 100 | times: 0.67 | round }}px{% endif %}, (min-width: 750px){% if section.blocks.size == 1 %} calc(100vw - 100px){% else %} 500px{% endif %}, calc(100vw - 30px)}{%- endcapture -%}

                                    {{ block.settings.image | image_url: width: 400 | image_tag:
                                    loading: 'lazy',
                                    class: 'object-cover w-full object-center mx-auto mt-[15px] mb-[25px] md:group-hover:animate-float',
                                    alt: block.settings.image.alt,
                                    sizes: sizes,
                                    widths: '550, 720, 990, 1100, 1500, 2200, 3000'
                                    }}

                                    {%- comment -%} <img class="object-cover w-[400px] mx-auto mt-[15px] mb-[25px] md:group-hover:animate-float" src="{{ block.settings.image | image_url }}" alt=""> {%- endcomment -%}
                                </div>
                            {% endif %}

                            <div class="px-[20px]">
                                {%- if block.settings.product_name != blank -%}
                                    <div>
                                        <span class="border-b">{{ block.settings.product_name }}</span>
                                    </div>
                                {%- endif -%}
                                {%- if block.settings.effect != blank -%}
                                    <div class="text-sm" style="padding-top: 5px">{{ block.settings.effect }}</div>
                                {%- endif -%}
                            </div>

                        </div>
                    {%- when 'green_schedule' -%}
                        <div x-show="scheduleType == 'green'"
                             class="flex flex-col py-[20px] transition-colors bg-cream hover:bg-green duration-300 hover:text-cream group">
                            <span class="px-[20px]">{{ block.settings.time }}</span>
                            {% if block.settings.image %}
                                <img class="object-cover w-[400px] mx-auto mt-[15px] mb-[25px] md:group-hover:animate-float"
                                     src="{{ block.settings.image | image_url }}" alt="">
                            {% endif %}

                            <div class="px-[20px]">
                                {%- if block.settings.product_name != blank -%}
                                    <div>
                                        <span class="border-b">{{ block.settings.product_name }}</span>
                                    </div>
                                {%- endif -%}
                                {%- if block.settings.effect != blank -%}
                                    <div class="text-sm" style="padding-top: 5px">{{ block.settings.effect }}</div>
                                {%- endif -%}
                            </div>
                        </div>
                {% endcase %}
            {% endfor %}


            <section style="z-index: 1000;" id="modal" x-show="modelOpen" class="fixed inset-0 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
                <div class="flex items-end justify-center min-h-screen px-4 text-center items-center sm:block sm:p-0">
                    <div x-cloak @click="modelOpen = false" x-show="modelOpen"
                         x-transition:enter="transition ease-out duration-300 transform"
                         x-transition:enter-start="opacity-0"
                         x-transition:enter-end="opacity-100"
                         x-transition:leave="transition ease-in duration-200 transform"
                         x-transition:leave-start="opacity-100"
                         x-transition:leave-end="opacity-0"
                         class="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-40" aria-hidden="true"
                    ></div>

                    <div x-cloak x-show="modelOpen"
                         x-transition:enter="transition ease-out duration-300 transform"
                         x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                         x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
                         x-transition:leave="transition ease-in duration-200 transform"
                         x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
                         x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                         class="inline-block w-full max-w-xl p-8 my-20 overflow-hidden text-left transition-all transform bg-white rounded-lg shadow-xl 2xl:max-w-2xl">

                        <div class="flex items-center justify-between space-x-4">
                            <h1 class="text-lg font-bold" x-text="bottles[currentBottle]['name']"></h1>

                            <button @click="modelOpen = false" class="text-gray-600 focus:outline-none hover:text-gray-700">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </button>
                        </div>

                        <div id="content">
                            <h2 class="uppercase font-medium mt-4">Ingredients</h2>
                            <div x-text="bottles[currentBottle]['ingredients']"></div>

                            <h2 class="uppercase font-medium mt-4">Description</h2>
                            <div x-text="bottles[currentBottle]['description']"></div>

                            <h2 class="uppercase font-medium mt-4">When To Drink</h2>
                            <div x-text="bottles[currentBottle]['drink']"></div>

                            <h2 class="uppercase font-medium mt-4">Shelf Life</h2>
                            <div x-text="bottles[currentBottle]['shelf']"></div>

                            <h2 class="uppercase font-medium mt-4">Nutrition Facts</h2>
                            <div x-text="bottles[currentBottle]['nutrition']"></div>
                        </div>

                    </div>
                </div>
            </section>
        </div>
    </div>
</section>


<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('bottles', () => ({
            modelOpen: false,
            currentBottle: 'celery',
            bottles: {
                'Celery Juice': {
                    'name': 'Celery Juice',
                    'ingredients': "Celery, Lemon",
                    'description': "Is the Celery Juice craze just a fad or is it here to stick around? We aren't sure either but we'll take that ride with you. It wasn't long ago when Celery was our least popular ingredient. Where were you guys at 5 years ago? Oh, well. Drink up!",
                    'drink': "Midday",
                    'shelf': "30 Days",
                    'nutrition': "100% Juice | Calories 50 | Sugar 6g | Protein 3g | Vitamin A 35% | Calcium 10% | Vitamin C 25%",
                },
                'Master Cleanse': {
                    'name': 'Master Cleanse',
                    'ingredients': "Pineapple, Extra Turmeric, Lemon, Dandelion, Cayenne, Maitake Mushroom",
                    'description': "Our island-grown Turmeric makes the most potent juice out of all our ingredients, and this recipe calls for a full shot of it. We use a Pineapple base and add Cayenne Pepper to take the famous Master Cleanse concept to the next level.",
                    'drink': "Morning",
                    'shelf': "80 Days",
                    'nutrition': "Calories 110 | Sugar 17g | Protein 1g | Calcium 4% | Vitamin C 130%",
                },
            },

            showBottle(bottle) {
                this.modelOpen = true;
                this.currentBottle = bottle
            },

        }))
    })
</script>

<script type="text/javascript">
    var sellingPlanContainer = document.querySelector('.selling-plan-fieldset')
    var productVariants = {{ section.settings.signature_product.variants | json }};
    var productForm = document.querySelector('.shopify-product-form');
    var findSelectedVariant = function () {
        var selectedVariantId = parseInt(document.querySelector('.shopify-product-form [name="id"]').value);
        var selectedVariant;

        for (var i = 0; i < productVariants.length; i++) {
            if (productVariants[i].id === selectedVariantId) {
                selectedVariant = productVariants[i];
                break;
            }
        }

        return selectedVariant;
    }

    productForm.addEventListener('change', function () {
        productForm.querySelector('input[name="id"]').value = productForm.querySelector('input[name="variant"]:checked').value

        var selectedVariant = findSelectedVariant();
        var availableSellingPlanAllocations = selectedVariant.selling_plan_allocations;

        console.log(selectedVariant);
    });
</script>

{% schema %}
{
  "name": "Signature Product Options",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading"
    },
    {
      "type": "textarea",
      "id": "blurb",
      "label": "Blurb"
    },
    {
      "type": "product",
      "id": "signature_product",
      "label": "Product"
    }
  ],
  "blocks": [
    {
      "type": "schedule",
      "name": "Signature Schedule",
      "limit": 8,
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "text",
          "id": "time",
          "label": "Time"
        },
        {
          "type": "text",
          "id": "product_name",
          "label": "Product Name"
        },
        {
          "type": "text",
          "id": "effect",
          "label": "Effect"
        }
      ]
    },
    {
      "type": "green_schedule",
      "name": "Green Schedule",
      "limit": 8,
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "text",
          "id": "time",
          "label": "Time"
        },
        {
          "type": "text",
          "id": "product_name",
          "label": "Product Name"
        },
        {
          "type": "text",
          "id": "effect",
          "label": "Effect"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Signature Product Options"
    }
  ]
}
{% endschema %}
